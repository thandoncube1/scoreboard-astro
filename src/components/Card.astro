---
export interface AstroData {
  date: string; // e.g., "2024-12-09"
  collection: GameSummary[]; // Array of game summaries
}

export interface GameSummary {
  _uuid: string; // Unique identifier for the game
  date: string; // Date of the game
  title: string; // Game title or description
  url: string; // Link to the game summary
  background_image: string; // URL to the background image
  game_book: string; // Link to the game book PDF
  homeTeam: TeamInfo; // Information about the home team
  awayTeam: TeamInfo; // Information about the away team
}

export interface TeamInfo {
  name: string; // Team name abbreviation (e.g., "NYK")
  lineScores: LineScores; // Quarter-wise and final scores
}

export interface LineScores {
  fst_quarter: string; // First quarter score
  snd_quarter: string; // Second quarter score
  trd_quarter: string; // Third quarter score
  fth_quarter: string; // Fourth quarter score
  final: string; // Final score
}

const { _uuid, title, url, background_image, game_book, homeTeam, awayTeam } = Astro.props;
---

<article class="mt-10">
    <div class="relative max-w-[376px] bg-cover bg-no-repeat">
        <table class="table-auto border border-spacing-3">
            <thead class="py-8 px-10 bg-gray-200">
                <tr
                    class="border-b text-[0.8em] border-gray-200 [&>th:last-child]:text-slate-700"
                >
                    <th>TEAM</th>
                    <th class="table-cell px-5 py-3">Q1</th>
                    <th class="table-cell px-5 py-3">Q2</th>
                    <th class="table-cell px-5 py-3">Q3</th>
                    <th class="table-cell px-5 py-3">Q4</th>
                    <th class="table-cell px-5 py-3">FINAL</th>
                </tr>
            </thead>
            <tbody>
                <tr
                    class="text-[0.8em] font-semibold [&>td:nth-child(n+2)]:text-center"
                >
                    <td class="table-cell px-4 py-4 font-semibold">{homeTeam.name}</td>
                    <td>{homeTeam.lineScores.fst_quarter}</td>
                    <td>{homeTeam.lineScores.snd_quarter}</td>
                    <td>{homeTeam.lineScores.trd_quarter}</td>
                    <td>{homeTeam.lineScores.fth_quarter}</td>
                    <td class="final_score">{homeTeam.lineScores.final}</td>
                </tr>
                <tr
                    class="text-[0.8em] font-semibold [&>td:nth-child(n+2)]:text-center"
                >
                    <td class="table-cell px-4 py-4 font-semibold">{awayTeam.name}</td>
                    <td>{awayTeam.lineScores.fst_quarter}</td>
                    <td>{awayTeam.lineScores.snd_quarter}</td>
                    <td>{awayTeam.lineScores.trd_quarter}</td>
                    <td>{awayTeam.lineScores.fth_quarter}</td>
                    <td class="final_score">{awayTeam.lineScores.final}</td>
                </tr>
            </tbody>
        </table>
        <button
            type="submit"
            class="absolute bottom-0 left-0 right-0 top-0 h-full w-full overflow-hidden bg-gray-400 bg-fixed opacity-0 transition duration-500 ease-in-out hover:opacity-20"
        >
        </button>
    </div>
</article>


<script>
// Finally the 2 pointer approach application
document.addEventListener('DOMContentLoaded', e => {
    e.preventDefault();

    // Array of games


    const FinalScores = document.querySelectorAll('.final_score');
    // Right pointer to move 2 steps until end of array
    let right = 1;
    let left = 0;
    // Two pointer approach
    while (right < FinalScores.length) {
        const leftScore = parseInt(FinalScores[left].textContent);
        const rightScore = parseInt(FinalScores[right].textContent);

        if (leftScore < rightScore) {
            FinalScores[right].classList.add("text-red-800");
        } else if (leftScore > rightScore) {
            FinalScores[left].classList.add("text-red-800");
        }
        // Increment by 2
        right += 2;
        left += 2;
    }

    console.log("Done.");
});

</script>